// cloud_noise.comp - 3D Perlin noise generation for clouds
#version 450 core

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;
layout(binding = 0, rgba8) uniform writeonly image3D cloudNoise;
layout(binding = 1, rgba8) uniform writeonly image3D cloudDetailNoise;

layout(push_constant) uniform PushConstants {
    int octaves;
    float lacunarity;
    float gain;
    float scale;
} constants;

// Permutation table for Perlin noise
const int perm[256] = int[](
    151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142,
    8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117,
    35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71,
    134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41,
    55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89,
    18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226,
    250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182,
    189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43,
    172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97,
    228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239,
    107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,
    138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180
);

float fade(float t) {
    return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);
}

float lerp(float t, float a, float b) {
    return a + t * (b - a);
}

float grad(int hash, float x, float y, float z) {
    int h = hash & 15;
    float u = h < 8 ? x : y;
    float v = h < 4 ? y : h == 12 || h == 14 ? x : z;
    return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);
}

float perlin(vec3 p) {
    ivec3 P = ivec3(floor(p)) & 255;
    p -= floor(p);
    
    vec3 f = vec3(fade(p.x), fade(p.y), fade(p.z));
    
    int A = perm[P.x] + P.y;
    int AA = perm[A] + P.z;
    int AB = perm[A + 1] + P.z;
    int B = perm[P.x + 1] + P.y;
    int BA = perm[B] + P.z;
    int BB = perm[B + 1] + P.z;
    
    return lerp(f.z, lerp(f.y, lerp(f.x, grad(perm[AA], p.x, p.y, p.z),
                                         grad(perm[BA], p.x - 1.0, p.y, p.z)),
                             lerp(f.x, grad(perm[AB], p.x, p.y - 1.0, p.z),
                                      grad(perm[BB], p.x - 1.0, p.y - 1.0, p.z))),
                   lerp(f.y, lerp(f.x, grad(perm[AA + 1], p.x, p.y, p.z - 1.0),
                                      grad(perm[BA + 1], p.x - 1.0, p.y, p.z - 1.0)),
                            lerp(f.x, grad(perm[AB + 1], p.x, p.y - 1.0, p.z - 1.0),
                                     grad(perm[BB + 1], p.x - 1.0, p.y - 1.0, p.z - 1.0))));
}

float fbm(vec3 p) {
    float value = 0.0;
    float amplitude = 1.0;
    float frequency = 1.0;
    
    for (int i = 0; i < constants.octaves; ++i) {
        value += amplitude * perlin(p * frequency);
        amplitude *= constants.gain;
        frequency *= constants.lacunarity;
    }
    
    return value * 0.5 + 0.5;
}

void main() {
    ivec3 coord = ivec3(gl_GlobalInvocationID.xyz);
    ivec3 size = imageSize(cloudNoise);
    
    if (coord.x >= size.x || coord.y >= size.y || coord.z >= size.z) return;
    
    vec3 pos = vec3(coord) / vec3(size) * constants.scale;
    
    float noise = fbm(pos);
    
    // Different noise patterns in each channel
    float r = fbm(pos);
    float g = fbm(pos + vec3(100.0));
    float b = fbm(pos + vec3(200.0));
    float a = fbm(pos + vec3(300.0));
    
    imageStore(cloudNoise, coord, vec4(r, g, b, a));

    // Генерация детального шума (меньшая частота)
    vec3 detailPos = vec3(coord) / vec3(size) * constants.scale * 0.5;
    float dr = fbm(detailPos);
    float dg = fbm(detailPos + vec3(50.0));
    float db = fbm(detailPos + vec3(100.0));
    float da = fbm(detailPos + vec3(150.0));
    imageStore(cloudDetailNoise, coord, vec4(dr, dg, db, da));
}