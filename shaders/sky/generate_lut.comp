// compute/generate_lut.comp - Generate atmosphere LUTs
#version 450
#extension GL_ARB_separate_shader_objects : enable

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(set = 0, binding = 0, rgba32f) writeonly uniform image2D transmittanceLUT;
layout(set = 0, binding = 1, rgba32f) writeonly uniform image2D multiScatteringLUT;

layout(set = 0, binding = 2) uniform AtmosphereParams {
    vec3 rayleighBeta;
    float planetRadius;
    vec3 mieBeta;
    float atmosphereRadius;
    float mieG;
    float rayleighHeight;
    float mieHeight;
    float padding;
} params;

// Compute transmittance for a ray through atmosphere
vec3 computeTransmittance(vec3 origin, vec3 dir, float distance) {
    const int SAMPLES = 64;
    float stepSize = distance / float(SAMPLES);
    
    vec3 opticalDepth = vec3(0.0);
    
    for (int i = 0; i < SAMPLES; i++) {
        float t = (float(i) + 0.5) * stepSize;
        vec3 pos = origin + dir * t;
        float height = length(pos) - params.planetRadius;
        
        float rayleighDensity = exp(-height / params.rayleighHeight);
        float mieDensity = exp(-height / params.mieHeight);
        
        opticalDepth += (params.rayleighBeta * rayleighDensity + 
                        params.mieBeta * mieDensity) * stepSize;
    }
    
    return exp(-opticalDepth);
}

void main() {
    ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
    ivec2 size = imageSize(transmittanceLUT);
    
    if (coord.x >= size.x || coord.y >= size.y) return;
    
    // Map coordinates to height and sun angle
    vec2 uv = (vec2(coord) + 0.5) / vec2(size);
    
    float height = mix(0.0, params.atmosphereRadius - params.planetRadius, uv.x);
    float cosAngle = uv.y * 2.0 - 1.0;
    
    vec3 origin = vec3(0.0, params.planetRadius + height, 0.0);
    vec3 dir = vec3(sqrt(1.0 - cosAngle * cosAngle), cosAngle, 0.0);
    
    // Compute ray length through atmosphere
    float atmosphereHeight = params.atmosphereRadius - params.planetRadius;
    float rayLength = atmosphereHeight * 2.0; // Simplified
    
    vec3 transmittance = computeTransmittance(origin, dir, rayLength);
    
    imageStore(transmittanceLUT, coord, vec4(transmittance, 1.0));
}