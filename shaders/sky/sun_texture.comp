#version 450

layout(local_size_x = 8, local_size_y = 8) in;
layout(binding = 0, rgba16f) uniform writeonly image2D outImage;

const float PI = 3.14159265359;

// Simple hash function for noise
float hash(vec2 p) {
    p = fract(p * vec2(123.34, 456.21));
    p += dot(p, p + 45.32);
    return fract(p.x * p.y);
}

// 2D noise
float noise(vec2 p) {
    vec2 i = floor(p);
    vec2 f = fract(p);
    f = f * f * (3.0 - 2.0 * f);
    
    float a = hash(i);
    float b = hash(i + vec2(1.0, 0.0));
    float c = hash(i + vec2(0.0, 1.0));
    float d = hash(i + vec2(1.0, 1.0));
    
    return mix(mix(a, b, f.x), mix(c, d, f.x), f.y);
}

void main() {
    ivec2 texCoord = ivec2(gl_GlobalInvocationID.xy);
    ivec2 texSize = imageSize(outImage);
    
    vec2 uv = vec2(texCoord) / vec2(texSize);
    vec2 center = uv * 2.0 - 1.0;
    float dist = length(center);
    
    if (dist > 1.0) {
        imageStore(outImage, texCoord, vec4(0.0));
        return;
    }
    
    // Limb darkening (solar physics)
    float cosTheta = sqrt(1.0 - dist * dist);
    float limbDarkening = 0.25 + 0.75 * pow(cosTheta, 0.65);
    
    // Granulation (solar surface texture)
    float angle = atan(center.y, center.x);
    float granulation = 0.0;
    granulation += 0.4 * noise(center * 20.0 + vec2(13.5, 7.2));
    granulation += 0.3 * noise(center * 40.0 + vec2(5.3, 11.7));
    granulation += 0.2 * noise(center * 80.0 + vec2(9.1, 3.4));
    granulation += 0.1 * noise(center * 160.0);
    granulation = granulation * 0.15 + 0.925; // Subtle
    
    // Edge softness
    float edgeFade = 1.0 - smoothstep(0.88, 1.0, dist);
    
    // Combine
    float brightness = limbDarkening * granulation * edgeFade;
    
    // Color temperature (warmer center)
    vec3 color = mix(
        vec3(1.0, 0.96, 0.88),  // edge: slightly orange
        vec3(1.0, 1.0, 0.98),   // center: white-yellow
        limbDarkening
    );
    
    // Corona glow in alpha
    float corona = 0.0;
    if (dist > 0.9 && dist < 1.2) {
        float coronaDist = (dist - 0.9) / 0.3;
        corona = pow(1.0 - coronaDist, 3.0) * 0.5;
    }
    
    imageStore(outImage, texCoord, vec4(color * brightness * 5.0, brightness + corona));
}